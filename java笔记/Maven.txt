provided 如果
build	 建立
plugin	 插件
deploy	 部署
central  中央
snapshot 快照
1.主流项目管理和构建工具
Maven Ant gradle

2.Maven目录结构
src							根路径
	-main					主要代码
		-java
			-package
	-test					测试代码
		-java
			-package
	-resource				资源目录

3.pom.xml标签
	groupId					项目包名
	artifactId				模块名
	version					版本
	dependencies			依赖
		type                默认为jar类型，常用的类型有：jar,ejb-client,test-jar...,可设置plugins中的extensions值为true后在增加 新的类型
		scope				依赖范围test(测试) compile(默认) provided(编译,测试) runtime(运行) system(与本机关联) import(从其他地方导入)
		optional			依赖是否可选true false(依赖是否被继承)
		exclusions			排除传递

	modelVersion  			pom版本4.0.0
	packaging				打包方式 war jar zip pom
	name 					项目描述名
	url						项目地址
	description				项目描述
	developers				开发人员列表
	licenses				许可证
	organization			组织信息
	build					构建行为支持
		defaultGoal 		指定动作  默认install
		directory   		存放位置  默认${basedir}/target
		finalName			文件名	  默认${artifactId}-${version}
		plugins 			插件列表
	dependencyManagement	依赖的管理(帮助管理子项目)
	parent					父模块
	modules					多模块
	properties				定义属性 标签为key,内容为value,类似EL表达式引用
4.命令
	compile 编译(会自动下载插件和jar)
	test 	运行测试用例
	package	打包项目
	clean	删除target
	install 安装jar包到本地仓库中

	archetype:generate	创建项目骨架
	archetype:generate -DgroupId=${包名} -DartifactId=${模块名} -Dversion${版本} -Dpackage=${包名} 快速创建项目骨架
	dependency:tree 	打印当前项目的依赖树

5.setting.xml标签
	localRepository  本地仓库路径
	mirror	镜像仓库
	mirrorOf	仓库名称
	profile 	指定jdk

6.eclipse的Maven插件m2e

7.项目构建过程
清理-编译-测试-打包-集成测试-验证-部署

8.生命周期
	clean 清理项目
		pre-clean	清理前
		clean 清理上一次构建产生的所有文件
		post-clean  清理后
	default 构建站点
		compile	编译
		test	测试
		package	打包
		install	安装到本地
	site 生成项目站点
		pre-site	生成站点前
		site 生成项目的站点文档
		post-site 生成站点后
		site-deplo 发布生成的站点到服务器

9.依赖冲突
	短路优先
	先申明优先

10.子工程会继承父工程的dependencies,developers,contributors,plugin lists,reports lists,plugin execution with matching ids,plugin configuration
11.父工程如果生命了relativePath标签则会尝试优先从远程库获取

12.构建配置
    defaultGoal:    默认的目标，必须跟命令行上的参数相同，如：jar:jar,或者与时期parse相同,例如install
    directory:      指定构建的目标目录,默认为$(basedir}/target
    finalName:      指定去掉后缀的工程名称,默认为${artifactId}-${version}
    filters:        用于定义指定filter属性的位置，例如filter元素赋值filters/filter1.properties,那么这个文件里面就可以定义name=value对，这个name=value对的值
                    就可以在工程pom中通过${name}引用，默认的filter目录是${basedir}/src/main/fiters/
    resources:      描述工程中资源的位置,以下为子标签
                    targetPath:     指定要构建的目录,默认为$(basedir}
                    filtering:      指定是否将filter文件(即上面说的filters里定义的*.property文件)的变量值在这个resource文件有效,例如上面就指定那些变量值在
                                    configuration文件无效
                    directory:      指定属性文件的目录，build的过程需要找到它，并且将其放到targetPath下，默认的directory是${basedir}/src/main/resources
                    includes:       指定包含文件的patterns,符合样式并且在directory目录下的文件将会包含进project的资源文件
                    excludes:       指定不包含在内的patterns,如果inclues与excludes有冲突，那么excludes胜利，那些符合冲突的样式的文件是不会包含进来的
                    testResources:  这个模块包含测试资源元素，其内容定义与resources类似，不同的一点是默认的测试资源路径是${basedir}/src/test/resources,
                                    测试资源是不部署的
    plugin:        插件,以下为子标签
                    extensions:     决定是否要加载这个插件的extensions,默认为true
                    inherited:      是否让子pom继承,默认为true
                    configuration:  通常用于私有不开源的plugin,不能够详细了解plugin的内部工作原理，但使plugin满足的properties
                    dependencies:   与pom基础的dependencies的结构和功能都相同，只是plugin的dependencies用于plugin,而pom的denpendencies用于项目本身.
                                    在plugin的dependencies主要用于改变plugin原来的dependencies，例如排除一些用不到的dependency或者修改dependency的
                                    版本等，详细请看pom的denpendencies
                    executions:     plugin也有很多个目标，每个目标具有不同的配置，executions就是设定plugin的目标
                    execution:      插件的目标,以下为子标签
                                    id:             标识符
                                    goals:          目标
                                    phase:          声明goals的执行时期
                                    inherited:      是否传递到子pom里
                                    configuration:  置execution下列表的goals的设置，而不是plugin所有的goals的设置



13.packge的过程    phase和goal对应
    process-resources       resources:resources
    compile                 compiler:compile
    process-test-resources  resources:testResources
    test-compile            compiler:testCompile
    test                    surefire:test
    package                 jar:jar
一.开发准备
	jar包:
		maven:activiti-engine
	插件:
		http://activiti.org/designer/update/

二.配置
	配置processEngineConfiguration:
		实现类:
			StandaloneProcessEngineConfiguration:单独运行的流程引擎,Activiti自己处理事务,数据库只在启动时检测,没有将会报错
			StandaloneInMemProcessEngineConfiguration:单元测试时的辅助类,Activiti自己处理事务,默认使用H2内存数据库,数据表会在启动时创建,关闭时删除
			SpringProcessEngineConfiguration:在Spring环境下使用的流程引擎
			JtaProcessEngineConfiguration:单独运行的流程引擎,并使用JTA事务
		参数:
			dataSource:数据源
			databaseType:数据库类型,可能的值有:h2, mysql, oracle, postgres, mssql, db2
			databaseSchemaUpdate:流程引擎启动和关闭时如何处理数据表.false:如果数据表版本和依赖库版本不匹配则抛出异常,true:如果需要就更新,不存在就创建.create-drop:开启时创建,关闭时删除
			jndiName:使用jndi数据源时配置数据源
			beans:配置了暴露的bean,默认状态下所有的spring的bean都是暴露的
			processDefinitionCacheLimit:配置流程定义的缓存个数
			eventListeners:配置任何事件都能触发的事件监听器
			typedEventListeners:配置特定事件才会触发的监听器,key是逗号分割的事件,value是监听器
		
	
	
三.业务模型注解BPMN2.0
	图形意义:
		矩形:活动
		条件:菱形
		圆圈:事件
	基本类型:
		流对象:一个业务流程图有三种流对象的核心元素,分别是:
			事件:表示一个业务流程期间发生的东西,影响流程的流动,一般有一个原因(触发器)或者一个影响(结果),分为开始事件,中间事件和结束事件
			活动:可以由多个活动组成一个活动,活动类型包括任务和子流程,子流程在流程下发中间外加一个"+"号来区分
			条件:用于控制序列流的分支和合并,还可以作为选择还包括路径的分支与合并,其内部标记会给出控制流的类型
		连接对象:连接对象将流对象连接起来形成一个基本的流程结构,连接对象包括:
			顺序流:用一个带实心箭头的穿心线表示,用于指定活动的先后顺序
			消息流:用一个带有开箭头的虚线表示,用于描述两个独立业务的参与者之间发送和接受消息的流动
			关联:用一根带有线箭头的点线表示用于将相关的数据文本和其他工人的信息与流对象联系起来,关联用于展示活动的输入与输出
		泳道:负责将活动划分到不同的可视化类别中来描述由不通参与者的责任与职责,包括两种泳道构件:
			池:描述一个参与者,可以看作是将一系列活动区别其他池的一个图形容器
			道:用于组织和分类活动
		人工信息:作为备注,便于人员理解
			数据对象:显示活动是如何产生数据的,通过关联将活动连接起来
			组:用一个虚线圆角矩形来表示,用于记录和分析,不影响顺序流
			注释:--注释

四.API笔记
	1).同步用户数据
		Activiti提供了IdentityService接口,可以操作ACT_ID_*的数据
	2).事件监听器
		事件监听器必须实现ActivitiEventListener接口,其中onEvent写监听的逻辑代码,isFailOnException的返回值决定事件onEvent出现异常时如何处理false为忽略,true为向上抛
		BaseEntityEventListener:这个事件监听器用来实现实体相关的事件
		在程序运行时可以通过RuntimeService的addEventListener和removeEventListener等接口来添加和移除事件监听器,在运行期添加的监听器引擎重启时失效
		
五.数据库表含义
	ACT_RE_*:'RE'表示repository,用于存储流程定义和流程静态资源
	ACT_RU_*:'RU'表示runtime,包含了流程实例,任务,变量,异步任务等运行中的数据这些表的数据在实例运行完毕后会自动删除
	ACT_ID_*:'ID'表示identity,这些表包含身份信息,例如用户和组等等
	ACT_HI_*:'HI'表示history,这些表保存历史数据,例如历史流程实例,变量,任务等等
	ACT_GE_*:通用数据
	
	act_re_procdef:流程id,key信息
	act_ge_bytearray:流程实际存储的地方
	
六.流程引擎使用步骤
	获取流程引擎配置:processEngineConfiguration-->配置
	创建流程引擎:processEngine-->processEngineConfiguration.buildProcessEngine
	获取RepositoryService:RepositoryService-->processEngine.getRepositoryService
	部署流程图:repositoryService.createDeployment().addClasspathResource("流程图路径").deploy()
	获取运行时服务:runtimeService-->processEngine.getRuntimeService
	获取流程实例:ProcessInstance-->runtimeService
	获取TaskService:TaskService-->processEngine.getTaskService
	查询Task:taskQuery-->taskService.createTaskQuery

七.流程变量
	在所有流程变量的顶部，有几个默认的对象可以在表达式中使用
	execution：DelegateExecution保存了流程持续执行的相关信息
	task：DelegateTask保存当前任务的相关信息
	authenticatedUserId：已验证的用户id，如果没有用户的身份验证，变量时不可用的
	
八.事件(avticti中事件分为捕获事件(Catching)和触发事件(Throwing))
	1.定时器事件(标签:timerEventDefinition)使用定时器必须开启job执行器
		timeDate:指定触发事件的时间,例如:2011-03-11T12:13:14(ISO 8601格式)
		timeDuration:指定之前要等待多长时间,例如:P10D 等待10天(ISO 8601格式)
		timeCycle:指定重复间隔,例如R3/PT10H(重复3次,每次间隔10小时,支持cron表达式和ISO 8601)
		
			
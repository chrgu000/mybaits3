
reflct  反射
serial	连续的
synchronized 同步
volitae	不稳定的
一.多线程
	1.synchronized
		线程解锁前,必须把共享变量的最新值刷新到主内存中
		线程加锁时,将清空工作内存中共享变量的值,在使用时需要从主内存重新读取
		加锁和解锁必须是同一把锁
		步骤:
			获得互斥锁 清空工作内存 拷贝主内存的变量副本 执行代码 刷向共享变量的值到主内存 释放互斥锁
		不可见的原因
			线程的交叉执行					原子性
			重排序结合线程交叉执行			原子性
			共享变量未及时更新				可见性
		synchronized可以保证原子性和可见性
	2.volatile
		禁止指令的重排序
		加入内存屏障,每次读写都刷新主内存
		需求:
			对变量的写入操作不依赖当前值
			改变量没有包含在具有其他变量的不变式中
	3.指令重排序
		编译器优化
		指令级并行重排序(处理器优化)
		内存系统的重排序(处理器优化)
		as-if-serial:无论如何排序,程序的执行结果应该与代码的顺序一致(JAVA编译器,运行时和处理区都会保证在单线程下遵循as-if-serial语义)
	4.JDK提供的api
		ReentrantLock
		AtomicInterger
	5.可返回的多线程接口	java.util.concurrent.Callable
		Callable的可执行方法为call,可以有返回值,可以抛出异常
		运行callable可以拿到一个java.util.concurrent.Future对象
		Future方法:
			isCancelled 如果任务在完成之前被取消返回true
			isDone	如果任务已完成返回true
	6.Spring线程池
	7.JAVA并发工具包
	    ThreadLocal:        用于创建一个每个线程都能独立操作的对象
        ReentrantLock:      可选公平锁
        ThreadLocalRandom:  随机数生成器
        ReadWriteLock:      读写锁,可以获取多个读取锁或者一个写入锁
        AtomicLong:         支持原子级操作的long
        AtomicReference:    原子级别引用(主要用于赋值操作)
        AtomicIntegerArray: 支持原子操作的int数组
				
	
	
二.文件操作
	编码:
		GBK 中文占用两个字节,英文占用一个字节
		UTF-8 中文占用三个字节,英文占用一个字节
		UTF-16be 中文占用两个字节,英文占用两个字节
	java.io.File
		可以表示文件和目录,该类只保存文件信息
	RandomAccessFile 随机读写文件
		构造参数:文件 操作(rw) 

三.反射
	1.常用类型
    	java.lang.Class	:类型
    	java.lang.reflect.Constructor:构造函数
    	java.lang.reflect.Field:字段
    	java.lang.reflect.Method:方法
    	java.lang.reflect.Modifier:修饰符

    2.常用方法
    	getDeclaredMethods:获取所有方法
    	getReturnType:获取方法的返回类型
    	getParameterTypes:获取方法的传入参数类型
    	getDeclaredMethod:获取指定方法
    	getDeclaredConstructors:获取所有的构造方法
    	getDeclaredConstructor:获取指定的构造方法
    	getSuperclass:获取父类
    	getInterfaces:获取实现的接口
	
四.内存分配
    1.栈内存(线程私有)
        栈内存包含程序计数器,jvm栈和本地方法栈
        栈内存用来存储局部变量和方法调用
        栈内存不足时抛出StackOverFlowError

    2.堆内存(线程共享)
        堆内存用来保存对象,方法区和运行时常量池
        堆内存不足时抛出OutOfMemoryError

    3.Xss代表栈内存大小,Xms代表初始堆内存大小,Xmx代表最大堆内存大小

五.Java命令(tools.jar)
    1.jps 显示当前用户的所有java进程的PID
        jps -v PID      显示虚拟机参数
        jps -m PID      显示传递给main函数的参数(在嵌入式JVM上可能是null)
        jps -l PID      显示主类的全路径
        jps -q          只显示PID

    2.jstat 显示进程中的类装载,内存,垃圾收集,JIT编译等运行数据
      命令格式 jstat -<option> [-t] [-h<lines>] <vmid> [<interval>|<count>]
      例: jstat -gc 4199 200 5      每200毫秒打印一次PID为4199的java进程的gc信息,一共打印5次
      常用命令形式
        jstat -class PID            显示加载的class数量和空间占用,
        jstat -compiler PID         显示VM实时编译数量信息
        jstat -gc PID               显示GC信息

六.RMI远程方法调用
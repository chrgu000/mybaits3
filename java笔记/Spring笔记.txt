一.注解
	RestController:指定一个类，作为控制器的注解 
	RequestMapping:请求映射
	EnableAutoConfiguration:自动配置
	SpringBootApplication:是类级别的注解，根据maven依赖的jar来自动猜测完成正确的spring的对应配置，只要引入了spring-boot-starter-web的依赖，默认会自动配置Spring MVC和tomcat容器
	Configuration:类级别的注解，一般这个注解，我们用来标识main方法所在的类,完成元数据bean的初始化
	ComponentScan:类级别的注解，自动扫描加载所有的Spring组件包括Bean注入，一般用在main方法所在的类上
	ImportResource:类级别注解，当我们必须使用一个xml的配置时，使用@ImportResource和@Configuration来标识这个文件资源的类
	Scope:设定Bean的作用域
	ResponseBody:使用返回值作为结果body
	Transactional:事务管理
	
	组件声明注解:
	Component:当不好归类时使用该注解
	Controller:声明Action组件
	Service:声明Service组件
	Repository:声明Dao组件
	
	自动化注入注解:
	Resource:J2ee提供的注解,默认按照名称装配:@Resource(name="beanName")
	Autowired:Spring提供的注解,默认按照类型装配
	
	InitBinder	方法级别注解,用于定义参数解析器,方法接受一个WebDataBinder参数

	ConditionalOnMissingBean:   接收一个参数name,表示只有在不包含指定name的bean时,才创建对应的bean
	ConditionalOnClass:         接收多个class类型的参数,标识只有在包含指定class的情况下才解析RabbitAutoConfiguration
	
二:笔记
	mvc:annotation-driven:该标签是以一简洁的形式注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean,是为Contrillers分发请求所必须的,并且提供了数据绑定支持以及NumberFormatannotation,DateTimeFormat,Valid等注解的支持
	mvc:interceptors:是一种简写形式,可以配置多个HandlerMapping,该标签会为每一个HandlerMapping注入一个拦截器
		拦截器可以实现HandlerInterceptorAdapter类:preHandle为前置拦截器,postHandle处理后执行
	mvc:default-servlet-handler:使用默认的servlet来响应静态文件
	mvc:resources:声明静态资源

三:spring工具类
StringUtils:字符串工具类
ObjectUtils:对象工具类
StreamUtils:IO工具类
AnnotationUtils:注解工具类
ReflectionUtils:反射工具类
ClassUtils:class工具类
GenericTypeResolver:泛型相关工具类
ResourceUtils:  读取资源文件
    内置Resouce类
        ClassPathResource:      读取构建路径下的文件
        UrlResource:            读取网络中的文件
        FileSystemResource:     读取系统中的文件
        ServletContextResource:
        InputStreamResource:
        ByteArrayResource:
        EncodedResource:
        VfsResource:



四.SpringBoot的使用
	application.properties/application.yml配置文件:
		server.port=80 端口配置
		server.context-path 路径前缀
		spring.profiles.active: 指定需要使用的配置文件
	注解:
		@Value	配置文件的注入
		@Component  以组件的形式注册bean
		@ConfigurationProperties 配置文件自动注入
		@Controller 以action的形式注册bean,处理Http请求
		@RestController Spring4新增注解,等同于@Controller+@ResponseBody
		@RequestMapping 配置url映射
		@PathVariable 获取url中的数据
		@RequestParam 获取请求参数的值(可以设置是否必须,默认值)
		@GetMapping 组合注解 get方式@RequestMapping
		@PostMapping post方式@RequestMapping
		@Configuration 标注为配置类,可以使用@Import来导入其他配置类,也可以使用@ImportResource来加载xml配置
		
		@Entity 实体注解
		@Id 主键
		@GeneratedValue 自增
		
		@Transactional 开启事务
		
		@SpringBootApplication启动类=@Configuration+@EnableAutoConfiguration+@ComponentScan
			exclude	排除自动化配置的类
		@ImportResource当必须要使用xml文件时可以使用此注解
		@ServletComponentScan 在SpringBootApplication上使用,开启@WebServlet,@WebFilter,@WebListener注解 
	
	注册接口:
		ServletRegistrationBean:servlet注册
		FilterRegistrationBean :
		ServletListenerRegistrationBean :
		ServletContextInitializer :
		
	拦截器： 
		创建我们自己的拦截器类并实现 HandlerInterceptor 接口。 
		创建一个Java类继承WebMvcConfigurerAdapter，并重写 addInterceptors 方法。 
		实例化我们自定义的拦截器，然后将对像手动添加到拦截器链中（在addInterceptors方法中添加）

	监听器:
	    创建监听器需要实现ApplicationListener接口,接收一个泛型,监听器可以使用addListeners方法添加进应用
	    ApplicationStartedEvent,ApplicationEnvironmentPreparedEvent,ApplicationPreparedEvent,ApplicationFailedEvent
        分别对应:启动开始,准备完毕但还没有创建上下文,上下文创建完成但是bean还没有完全加载,启动异常

	服务启动时的操作:
		需要实现CommandLineRunner接口,@Order指定执行顺序,@Component指定该类是一个组件
		
	servlet容器配置类(代替配置文件):EmbeddedServletContainerCustomizer  
	
	错误处理实现接口ErrorController:
	
	如果你想完全控制Spring MVC，你可以在@Configuration注解的配置类上增加@EnableWebMvc，增加
	该注解以后WebMvcAutoConfiguration中配置就不会生效，你需要自己来配置需要的每一项。这种情况下
	的配置方法建议参考WebMvcAutoConfiguration类。
    在不使用spring-boot-parent作为父项目的情况下需要配置spring-boot-dependencies

    配置相关:
	    static-locations: ["file:src/main/webapp/static/"]
	    validation-query: SELECT 1      配合test-while-idle和test-on-borrow在创建数据源时测试数据源是否能连通
		
五.SpringJpa
	建立接口继承JpaRepository类<实体,主键>
	findBy属性名(属性类型 形参)根据某个属性查询
	jpa使用JPQL语法
	spring-data-jpa语法:
		findByNameLike:			where name like =?1
		findByNameAndPass:			where name=?1 and pass=?2
		findByStartDateBetween:		where start_date between ?1 and ?2
		findByAgeLessThan:			where age<?1
		findByAgeGreaterThan		where age>?1
		findByAgeIsNumm				where age is null
		findByAgeNotNull			where age not null
		findByNameNotLike			where name not like ?1
		findByAgeOrderByLastNameDesc		where age=? order by lastname desc
		findByAgeNoy				where age <> ?1
		findByAgeIn(参数为集合)		where age in ?1
		findByAgeNotIn(参数为集合)	where age not in ?1
		
		
	
	@GeneratedValue自增注解
	@MappedSuperclass  映射类实体
	
	
六.Spring Security
	1.需要配置过滤器:DelegatingFilterProxy
	
	
七.springMVC
	PropertyEditorSuport	自定义参数解析器 可扩展 局部使用webdatabinder	配合InitBinder	方法级别注解,用于定义参数解析器,方法接受一个WebDataBinder参数使用
	Formatter				格式化参数       可扩展	全局/局部	source=String
	Converter				转换器			 不可扩展 全局/局部  source=自定义
	FormattingConversionServiceFactoryBean Formatter合Converter 需要在该类的bean实例注册
	<mvc:annotation-driven conversion-service="FormattingConversionServiceFactoryBean的实例" />
	
八.使用springloaded实现热部署
	set JAVA_OPTS=-javaagent:springloaded-1.2.5.RELEASE.jar -noverify

九.hibernate注解
    Entity:         声明为实体bean类
    Id:             声明了实体的标识属性
    GenerateValue:  主键的生成策略,AUTO:取决于底层不同的数据库,TABLE:使用表保存ID值,IDENTITY:自增,SEQUENCE:序列
                    类型的枚举类GenerationType
    Table:          为实体bean指定对应的数据表,uniqueConstraints属性可以定义唯一约束
    Version:        注解用于支持乐观锁版本控制,一般映射到@Column(name="OPTLOCK")字段来检测版本冲突可以用数字
                    或者时间戳
    Column:         列注解,name标识列名,unique表示是否唯一约束,nullable是否可为null,insertable是否insert,
                    updatable是否update,columnDefinition默认值,table对应的表,length列长度,precision
                    decimal精度,scaled ecimal长度
    Transient:      标识该属性不需要持久化
    Lob:            将被持久化为Blog或Clob类型
    Inheritance:    类的继承策略,TABLE_PER_CLASS:每个类一张表,SINGLE_TABLE:每个类层次结构一张表,JOINED:连接
                    的子类策略
    MappedSuperclass: 配置模板类,类本身不映射数据表
    Transient:          该注解标注ORM忽略的属性

    无注解属性默认值:
        属性为简单类型,则映射为@Basic
        属性对应的类型定义了@Embeddable则映射为@Embedded
        属性对应的类实现了Serializable,则属性被映射为@Basic并在一个列中保存该对象的serialized版本
        属性类型为java.sql.Clob或者java.sql.Blob映射为@Lob对应的类型

十.与Mybaits的整合
    使用mybatis-spring-boot-starter依赖
    实体类无需注解映射
    dao类使用@Mapper注解映射一个借口即可,借口类的方法可以接受一个@select注解作为查询
    配置项:
    map-underscore-to-camel-case:   使用驼峰命名法
    config-location:                指定本地xml配置文件的位置
    check-config-location:          检查本地的xml文件
    mapper-locations:               指定本地映射xml文件的位置
    type-aliases-package:           用于搜索类型别名的软件包
    type-handlers-package:          用于搜索类型处理程序的软件包
    executor-type:                  执行程序类型SIMPLE,REUSE,BATCH
    configuration-properties:       Mybaits外部化配置文件
    configuration:                  配置MyBaitsBean不能与config-location同时使用(详细配置可以查询Configuration类)
        default-statement-timeout:              配置stmt的超时时间,单位秒
        auto-mapping-unknown-column-behavior:   发现没有映射的列时的行为,NONE不做任何反应,WARNING输出提醒日志(org.apache.ibatis
                                                .session.AutoMappingUnknownColumnBehavior的日志等级必须为WARN),FAILING映射
                                                失败,抛出异常
        default-fetch-size:                     驱动的结果集获取数量,设置一个提示值.此参数只可以在查询中被覆盖

    注解:
        Lang:                       使用自己写的驱动改动脚本
    类:
        LanguageDriver:    该类好像可以在sql语句执行之前改动sql语句,可以细看
        MapperMethod:      该类作为解析sql注解并能执行的类
        MapperRegistry:    Mapper的注册类,如果要做额外的逻辑考虑从这里入手

十一.测试
    @RunWith(SpringRunner::class)   告诉Junit使用SpringBoot的单元测试,是SpringJunit4ClassRunner的替代
    @SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)  指定运行SpringBoot为一个基础的测试
    以上注解为新版本的SpringBoot的测试注解
